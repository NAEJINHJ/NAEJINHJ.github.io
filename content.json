{"meta":{"title":"NA'rchive","subtitle":null,"description":"Hyejin's log","author":"Hyejin","url":"https://NAEJINHJ.github.com"},"pages":[],"posts":[{"title":"참고할 만한 데이터셋","slug":"DATA","date":"2019-01-27T17:15:26.285Z","updated":"2019-01-27T17:36:31.443Z","comments":true,"path":"2019/01/28/DATA/","link":"","permalink":"https://NAEJINHJ.github.com/2019/01/28/DATA/","excerpt":"","text":"DATA MLB Game Logs 1871-2016 https://data.world/dataquest/mlb-game-logs Football https://datahub.io/search?q=football","categories":[{"name":"BIGDATA","slug":"BIGDATA","permalink":"https://NAEJINHJ.github.com/categories/BIGDATA/"},{"name":"DATA","slug":"BIGDATA/DATA","permalink":"https://NAEJINHJ.github.com/categories/BIGDATA/DATA/"}],"tags":[{"name":"data","slug":"data","permalink":"https://NAEJINHJ.github.com/tags/data/"},{"name":"modeling","slug":"modeling","permalink":"https://NAEJINHJ.github.com/tags/modeling/"}]},{"title":"PLAN","slug":"upload-plan","date":"2019-01-27T16:40:47.333Z","updated":"2019-01-27T17:33:53.364Z","comments":true,"path":"2019/01/28/upload-plan/","link":"","permalink":"https://NAEJINHJ.github.com/2019/01/28/upload-plan/","excerpt":"","text":"UPLOAD 자바 게임 프로젝트 - 주사위 게임 메이저 리그 야구 승률 예측 - 음이향 모형 사용한 시뮬레이터 AirKorea 데이터 분석 코딩테스트 뉴스 클러스터링 웹 크롤링 (두산베어스 온라인 스토어) kaggle 세일 예측 - Predict Future Sales PLAN 규동 메뉴 이미지 판정 챗봇(회화봇) OpenCV로 얼굴 인식 &amp; 모자이크 프로그램","categories":[{"name":"LOG","slug":"LOG","permalink":"https://NAEJINHJ.github.com/categories/LOG/"}],"tags":[{"name":"PLAN","slug":"PLAN","permalink":"https://NAEJINHJ.github.com/tags/PLAN/"},{"name":"LOG","slug":"LOG","permalink":"https://NAEJINHJ.github.com/tags/LOG/"}]},{"title":"메이저리그 야구 승률 예측 - ① 게임-데이 시뮬레이션","slug":"baseball-winner-prediction","date":"2019-01-26T14:55:11.387Z","updated":"2019-01-27T16:37:05.172Z","comments":true,"path":"2019/01/26/baseball-winner-prediction/","link":"","permalink":"https://NAEJINHJ.github.com/2019/01/26/baseball-winner-prediction/","excerpt":"","text":"[목차] 개요 데이터 분석 게임-데이 시뮬레이션 (승리하는 팀을 가려내기 위한 예측 모델링 프레임 워크) [개요] 일반에 공개된 메이저 리그 야구 데이터를 사용하여 타우트 없이 승리팀을 가려낼 수 있는 데이터 기반 분석 (타우트 - 경마나 스포츠 경기에서 도박 정보나 팁을 파는 사람) ▶ 설명 변수 과거 선수의 역량(타율, 방어율 등)과 팀의 승률과 관련 이러한 변수에 근거해 상대팀의 득점 예측 이외에도 게임이 진행될 장소와 시기, 게임 결과에 영향을 줄 수 있는 다른 모든 조건 고려 ▷ 반응 변수 승 / 패/ 득점 수 (득점 스코어 - 게임, 팀, 시간 or 일정으로 구성) ▶ 분석 방법 일반적인 분석과 동일하게, 훈련-테스트 방법 이용해 모형 평가 ▷ 승점 모형 전통적 방법, 데이터 적응(data adaptive) 방법 두 가지 방법의 조합 데이터 분석 미래 득점 예측 위해 과거 승리 기록 참조 2007년 시즌 분석 위해 메츠와 양키스 간 해당 시즌에 대한 데이터 선택 (이전 시즌에 얻은 팀 통계와 2007년 프리시즌 기록은 무시) [뉴욕 메츠의 경기와 득점에 대한 모든 정보](4/1~6/15) 홈/ 원정 경기에서 모두 상대팀보다 많은 점수 기록 [뉴욕 양키스의 경기와 득점에 대한 모든 정보](4/1~6/15) 원정 경기에서 상대팀보다 많은 점수 기록 but 홈 경기에서 적은 점수 기록 5월 18일 양키스 2: 메츠 3 5월 19일 양키스 7: 메츠 10 5월 20일 양키스 6: 메츠 2 이와 같은 세 경기의 결과를 사용하여 6월 15~17일의 게임 결과를 예측 게임-데이 시뮬레이션 뉴욕 메츠의 대부분의 경기가 지명 타자가 없는 내셔널 리그라는 점 뉴욕 양키스는 대부분 지명타자가 있는 아메리칸 리그 경기를 한다는 점 고려하지 X [첫번째 시뮬레이션] 분석 대상의 실점은 고려하지 X 득점에만 초점을 둔 경우 1234567891011121314151617# 파일 읽어오기# 깨지는 헤더 수정library(reshape)mets &lt;- read.csv(\"./data/NY_m.csv\",header=TRUE,encoding = \"UTF-8\")mets &lt;- rename(mets, c(\"X.U.FEFF.hometeam\" = \"hometeam\"))yankees &lt;- read.csv(\"./data/NY_y.csv\",header=TRUE,encoding = \"UTF-8\")yankees &lt;- rename(yankees, c(\"X.U.FEFF.hometeam\" = \"hometeam\"))# 원정팀 메츠의 득점과 홈팀 양키스의 득점away_mets &lt;- mets$away_NY_maway_mets &lt;- away_mets[-c(32:34)] # 결측값과 평균값 삭제 위함home_yankees &lt;- yankees$home_NY_yhome_yankees &lt;- home_yankees[-c(32:34)] away_mets와 home_yankees의 득점값을 랜덤으로 추출 가상 게임을 돌림 (랜덤으로 추출된 숫자 비교) 동점일 경우 카운트하지 X 123456789101112131415161718192021222324# 득점 값 랜덤 추출random_mets &lt;- sample(away_mets, 50000, replace=TRUE)random_yankees &lt;- sample(home_yankees, 50000, replace=TRUE)# 각 팀이 몇번 승리하였는지 카운트 할 변수mets_win_cnt = 0yankees_win_cnt = 0for(i in 1:length(random_mets))&#123; if (random_mets[i] &gt; random_yankees[i]) mets_win_cnt &lt;- mets_win_cnt + 1 else if(random_mets[i] &lt; random_yankees[i]) yankees_win_cnt &lt;- yankees_win_cnt + 1 else next&#125;# 승률mets_win_rate = mets_win_cnt/length(random_mets)yankees_win_rate = yankees_win_cnt/length(random_mets)cat('뉴욕 메츠의 승률 : ', mets_win_rate,'\\n')cat('뉴욕 양키스의 승률 : ', yankees_win_rate) [두번째 시뮬레이션] 공격과 수비 모두 고려 (득점과 실점) - 공격 득점(대상팀의 득점)과 수비 실점(상대팀의 득점) - 각 팀의 예상 득점을 추정하기 위해서는,해당 팀이 획득한 득점과 허용한 실점에 대한경험적 분포에서 추출한 임의의 랜덤 값을 사용 - 상대팀의 공격과 수비 숫자를 평균 메츠와 양키스가 서로 상대로 한 게임을 분석하기 위해서는, 공격과 수비 성적 데이터를 모두 고려해야 함! 양키스 경기장에서 열린 게임에서원정팀인 뉴욕 메츠는 홈팀인 양키스를 대상으로 공격홈팀 양키스는 워정팀 메츠를 대상으로 공격 1234567891011121314# 메츠의 득점과 실점away_mets &lt;- mets$away_NY_maway_mets &lt;- away_mets[-c(32:34)]away_mets_runs &lt;- mets$home_scoreaway_mets_runs &lt;- away_mets_runs[-c(32:34)]awaymets_for_graph &lt;- data.frame(away_mets,away_mets_runs)# 양키스 득점과 실점home_yankees &lt;- yankees$home_NY_yhome_yankees &lt;- home_yankees[-c(32:34)]home_yankees_runs &lt;- yankees$home_scorehome_yankees_runs &lt;- home_yankees_runs[-c(32:34)]homeyankees_for_graph &lt;- data.frame(home_yankees,home_yankees_runs) ggplot 라이브러리 사용해 공격과 수비를 모두 고려한 메츠 원정팀, 양키스 홈팀의 득실 빈도 그래프를 그려보면 1234567891011121314151617181920212223242526272829303132333435# 메츠의 득점 요인random_mets_attack &lt;- sample(away_mets, 50000, replace=TRUE)random_mets_defence &lt;- sample(away_mets_runs, 50000, replace=TRUE)avg_mets &lt;- 0# 양키스의 득점 요인random_yankees_attack &lt;- sample(home_yankees, 50000, replace=TRUE)random_yankees_defence &lt;- sample(home_yankees_runs, 50000, replace=TRUE)avg_yankees &lt;- 0for(i in 1:length(random_mets_attack))&#123;avg_mets &lt;- append((random_mets_attack[i]+random_mets_defence[i])/2,avg_mets)avg_yankees &lt;- append((random_yankees_attack[i]+random_yankees_defence)/2,avg_yankees)&#125;# 각 팀이 몇번 승리하였는지 카운트 할 변수mets_win_cnt = 0yankees_win_cnt = 0for(i in 1:length(avg_mets))&#123; if (avg_mets[i] &gt; avg_yankees[i]) mets_win_cnt &lt;- mets_win_cnt + 1 else if(avg_mets[i] &lt; avg_yankees[i]) yankees_win_cnt &lt;- yankees_win_cnt + 1 else next&#125;# 승률mets_win_rate = mets_win_cnt/length(avg_mets)yankees_win_rate = yankees_win_cnt/length(avg_mets)cat('뉴욕 메츠의 승률 : ', mets_win_rate,'\\n')cat('뉴욕 양키스의 승률 : ', yankees_win_rate)","categories":[{"name":"BIGDATA","slug":"BIGDATA","permalink":"https://NAEJINHJ.github.com/categories/BIGDATA/"},{"name":"Modeling","slug":"BIGDATA/Modeling","permalink":"https://NAEJINHJ.github.com/categories/BIGDATA/Modeling/"},{"name":"R","slug":"BIGDATA/Modeling/R","permalink":"https://NAEJINHJ.github.com/categories/BIGDATA/Modeling/R/"}],"tags":[{"name":"modeling","slug":"modeling","permalink":"https://NAEJINHJ.github.com/tags/modeling/"},{"name":"R","slug":"R","permalink":"https://NAEJINHJ.github.com/tags/R/"}]},{"title":"NoSQL이란?","slug":"NoSQL","date":"2019-01-24T07:15:52.142Z","updated":"2019-02-08T13:39:08.088Z","comments":true,"path":"2019/01/24/NoSQL/","link":"","permalink":"https://NAEJINHJ.github.com/2019/01/24/NoSQL/","excerpt":"","text":"[목차] 개념 특징 장점 단점 종류 MongoDB EcoSystem 1. 개념 Not Only SQL의 약자 기본 RDBMS의 한계를 극복하기 위해 만들어진 새로운 형태의 데이터베이스 분산 환경에서 대용량의 데이터를 빠르게 처리하기 위해 개발 됨 분산형 구조를 통해 여러대의 서버에 분산하여 저장하고, 상호 복제하여 데이터 유실이나 서비스 중지에 대비 핵심은 Horizontal Scalability(수평확장)과 High Availability(고가용성) 릴레이션이 아니므로 고정된 스키마가 없고(Schema-less) 조인이 힘듦 거대한 Map으로서 key-value 형식을 지원 대부분 CAP 이론을 따름 CAP 이론 [Consistency]-일관성 분산된 노드 중, 어느 노드로 접근하더라도 데이터 값이 같아야 함 (데이터 복제 중에 쿼리가 되는 시스템, 즉 일관성을 제공하지 않는 시스템의 경우 다른 데이터 값이 쿼리 될 수 있음) [Availability]-가용성 클러스터링된 노드 중 하나 이상의 노드가 실패라도 정상적으로 요청을 처리할 수 있는 기능을 제공 [Partition Tolerance]-분산 허용 클러스터링 노드 간에 통신하는 네트워크가 장애가 나더라도 정상적으로 서비스를 수행 노드간 물리적으로 전혀 다른 네트워크 공간에 위치도 가능 이 중 2가지만 만족할 수 있음 - RDBMS는 일반적으로 일관성과 가용성 만족 - NoSQL [가용성/분산허용 만족] or [일관성/분산허용 만족] 제품군으로 나뉨 [RDBMS의 한계] 많은 데이터양과 처리량이 계속적으로 증가한다면, ● 스키마 문제: 빅데이터를 RDB의 스키마에 맞춰 변경해서 넣으려면 매우 긴 시간의 down time 발생 ● 스케일업의 한계: 관계 모델과 트랜잭션의 연산, 일관성, 속성을 유지하면서 분산환경(스케일 아웃)에서 RDBMS를 조작하는 것은 어려움 2. 특징 [Document-oriented storage] MongoDB는 database &gt; collections &gt; documents 구조 document는 key-value 형태의 BSON(Binary JSON) [Full Index Support] 다양한 인덱싱 제공 Single Field Indexes Compound Indexes Multikey Indexes Geospatial Indexes and Queries Text Indexes Hashed Index [Replication &amp; High Availability] 간단한 설정만으로 데이터 복제 지원, 가용성 향상 [Auto-Sharding] 처음부터 자동으로 데이터를 분산하여 저장 하나의 컬렉션처럼 사용 가능 수평적 확장 가능 [Querying](documented-based query) 다양한 종류의 쿼리문 지원 (필터링, 수집, 정렬, 정규표현식) [Fast In-Pace Updates] 고성능의 atomic operation 지원 [Map/Reduce] 분산/병렬 시스템 운용 지원 [GridFS] 자동으로 분산 파일 저장 실제 파일이 어디에 저장되어 있는지 신경쓸 필요 X 복구 역시 자동 [Commercial Support] 10gen에서 관리하는 오픈 소스 3. 장점 ● 클라우드 컴퓨팅 환경에 적합 Open Source임 하드웨어 확장에 유연한 대처가 가능 RDBMS에 비해 저렴한 비용으로 분산 처리와 병렬 처리 가능 ● 유연한 데이터 모델임 비정형 데이터 구조 설계로 설계 비용 감소 관계형 데이터베이스의 Relationship과 Join구조를 Linking과 Embedded로 구현해 성능이 빠름 (join을 피할 수 있기 때문) ● 빅데이터 처리에 효과적 Memory Mapping 기능을 통해 Read/Write가 빠름 기존의 OS와 H/W에 구축 가능 기존 RDB와 동일하게 데이터 처리 가능 4. 단점 ● 정합성이 떨어지므로 트랜잭션이 필요한 경우에는 부적합 (ex. 금융, 결제 등) ● JOIN이 없기 때문에, join이 필요없도록 데이터 구조화 필요 ● memory mapped file으로 파일 엔진 DB 메모리 관리를 OS에 위임메모리에 의존적, 메모리 크기가 성능 좌우 ● SQL 완전히 이전 불가 ● B트리 인덱스 사용해 인덱스 생성, 크기가 커질 수록 입력/삭제 성능 저하 5. 종류 MongoDB Casandra HBASE CouchDB Riak Redis [참조 사이트] http://nosql-database.org http://www.mongodb.org http://hbase.apache.org/ http://couchdb.apache.org/ 4. MongoDB EcoSystem [Sharding System] 빅데이터의 효율적인 분산 저장 [ReplicaSets] 데이터의 안전한 복제 저장 [Text Search Engine / Full Indexing 기법] 저장된 데이터를 보다 빠르게 추출 [MapReduce / Aggregation FrameWork] 데이터의 빠른 분석, 가공처리 [GridFs] 비정형 데이터의 효율적인 저장 및 관리 [OPS Manager / Compass] 각 Sub System이 효율적으로 운영되고 있는지 모니터링 [참조] MongoDB Master가 해설하는 New NoSQL &amp; mongoDB - 주종면 저 NoSQL (개념, 특징과 장점, CAP 이론, 데이터모델 분류) 출처: https://sjh836.tistory.com/97 [빨간색코딩]","categories":[{"name":"DB","slug":"DB","permalink":"https://NAEJINHJ.github.com/categories/DB/"},{"name":"NoSQL","slug":"DB/NoSQL","permalink":"https://NAEJINHJ.github.com/categories/DB/NoSQL/"}],"tags":[{"name":"DB","slug":"DB","permalink":"https://NAEJINHJ.github.com/tags/DB/"},{"name":"NoSQL","slug":"NoSQL","permalink":"https://NAEJINHJ.github.com/tags/NoSQL/"},{"name":"MongoDB","slug":"MongoDB","permalink":"https://NAEJINHJ.github.com/tags/MongoDB/"}]},{"title":"124 나라의 숫자","slug":"country124","date":"2019-01-19T09:33:35.307Z","updated":"2019-01-19T14:04:53.098Z","comments":true,"path":"2019/01/19/country124/","link":"","permalink":"https://NAEJINHJ.github.com/2019/01/19/country124/","excerpt":"","text":"n%3 == 0 n%3 == 1 n%3 == 2 4 1 2 파라미터 n을 3으로 나눈 나머지 (n%3) n % 3 == 0 인 경우는 예외 처리해야 함 (n=15일 경우) &gt; 이 경우 n-1 값을 n으로! 나머지 값을 인덱스로 리스트에 접근하기 위해, 리스트의 값은 [4,1,2]로 설정했음 (python 3.x 버전은 나눗셈 연산으로 //을 쓸 것!) 123456789101112def solution(n):answer = ''arr = [4, 1, 2]rem = 0while(n&gt;0): rem = n % 3 n = n//3 if rem == 0: n -= 1 answer = str(arr[rem]) + answerreturn answer","categories":[{"name":"Coding Test","slug":"Coding-Test","permalink":"https://NAEJINHJ.github.com/categories/Coding-Test/"},{"name":"Python","slug":"Coding-Test/Python","permalink":"https://NAEJINHJ.github.com/categories/Coding-Test/Python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://NAEJINHJ.github.com/tags/python/"},{"name":"coding test","slug":"coding-test","permalink":"https://NAEJINHJ.github.com/tags/coding-test/"}]},{"title":"고 & 스톱","slug":"C-sharp","date":"2019-01-18T02:09:10.727Z","updated":"2019-01-18T08:26:59.914Z","comments":true,"path":"2019/01/18/C-sharp/","link":"","permalink":"https://NAEJINHJ.github.com/2019/01/18/C-sharp/","excerpt":"","text":"[목차] 1. HOME 2. HOW TO 3. GAME PLAY 4. GO STOP 5. SCORE 특이 사항 1. HOME [START button] MouseMove 이벤트: 버튼에 마우스 올리면, 웃고 있는 캐릭터 이미지로 변경 MouseLeave 이벤트: 마우스가 버튼 밖으로 벗어나면, 다시 원래의 이미지로 돌아감 Click 이벤트: 게임 플레이 화면으로 전환 [HowTo button] MouseMove 이벤트: 버튼에 마우스 올리면, 웃고 있는 캐릭터 이미지로 변경 MouseLeave 이벤트: 마우스가 버튼 밖으로 벗어나면, 다시 원래의 이미지로 돌아감 Click 이벤트: 게임 룰 설명 화면으로 전환 [화면 전환 방식] 1) HOME 폼을 숨김 2) 실행하고 싶은 폼의 객체 생성하여 실행 시킴 3) HOME 폼 닫음 2. HOW TO [룰 설명] 이미지로 제작, backgroundimage로 설정 [Click 이벤트] 화살표 버튼 클릭 시, 다시 홈 화면으로 전환 3. GAME PLAY 총 5개의 패널로 구성 [computerCardPanel] 위에서 부터 컴퓨터 패를 놓음 [computerScorePanel] 컴퓨터가 얻은 카드 순서대로 정렬 점수 출력 GO를 한 횟수를 출력 [playPanel] 실제 게임의 필드(바닥)에 해당하는 패널 [UserScorePanel] 유저가 얻은 카드 순서대로 정렬 점수 출력 GO를 한 횟수를 출력 [UserCardPanel] 유저의 카드 패를 놓음 카드 패는 버튼으로 구성 [Card Setting] 카드 클래스 구현 생성자에서 카드의 인덱스, 이미지, 월과 가치 값 세팅 크기 48의 클래스 배열 생성 카드를 순서대로 저장시킨 뒤, 랜덤하게 섞어줌 분배 0~9 : 유저의 카드패 10~ 19 : 컴퓨터의 카드패 20 ~ 27: 필드에 깔리는 카드 28 ~ 47: 뒤집어져 있는 카드 더미 [이미지 예외 처리] 이미지 세팅 과정에서 필요한 이미지가 존재하지 않을 시, 예외 처리 에러 실행 [GAME START] 필드에 카드가 랜덤하게 8장 깔림 (필드에 깔린 카드들은 리스트로 관리) Card Setting 과정에서 분배받은 8장의 카드에 대해, picturebox 생성하는 식으로 구현 동일한 월을 갖는 카드가 있을 시, 일정한 간격으로 겹쳐지게 함 (각 월마다 기준 좌표가 존재) [User’s Card] 10개의 버튼(유저패)의 backgroundimage 분배받은 카드의 이미지 버튼 클릭 시, 유저가 그 카드를 낸 것으로 간주 해당 버튼의 사용을 금지시키고, 더이상 보이지 않도록 설정 [총통] 유저 혹은 상대 패에 같은 월의 카드가 4장 있을 시, 총통임을 메시지 박스로 보여주고, 즉시 50점 획득해 승리하도록 함 [User’s turn] 필드에 일치하는 월이 있는지, 해당 월의 카드가 몇 장 있는지 체크 조건에 따라 득점되어 필드에 추가 or 똥 처리 득점한 카드 가치 값에 따라 다른 좌표로 정렬되어 각 score 패널에 표시 이후 상대의 turn으로 바뀜 [Computer’s turn] 낸 카드는 숨겨짐 delay 함수 사용 카드를 내거나 이벤트가 발생되었을 때, 육안으로 잘 보이게 하기 위함 (시간 지연 함수) [Computer’s turn] 가진 패의 앞에서부터 카드를 내도록 함 현재 점수와 고의 횟수에 대한 정보가 각 스코어 패널의 레이블에 표시 됨 [똥 Event] 더미에서 카드를 뒤집고 3장이 겹치게 되었을 때 발생 &gt; 똥 이미지 출력, 3장의 카드는 그대로 필드에 남김 (만약 필드에 남은 3장의 카드와 같은 월의 카드를 낸다면 총 4장으 얻게 됨) [Score] 각 피의 개수에 따른 점수 홍단 / 청단 / 초단 고도리 3광 / 4광 / 5광 피박 고박 고 횟수 당 1점 추가 [Calculating] 리스트로 상대와 내가 획득한 카드의 인덱스 저장해, 이를 토대로 점수 계산 이벤트 발생 시, (홍단/청단/초단, 고도리, 3광/4광/5광, 똥) 델리게이트를 사용 이미지 출력과 점수 계산이 되도록 구현 [Game Over] 남은 더미 카드 수 소진 스탑 선택 시 4. GO STOP GO의 여부를 묻는 폼 7점 이상 획득 시 생성 7점 이하까지는 피박이 적용되지 X 카드가 추가되어 면박이 될 경우, 점수가 하락하지만 GO/STOP 선택은 가능 [GO 선택] GO 이미지가 뜸 점수와 GO의 횟수 하나씩 증가 게임 계속 진행 [STOP 선택] 유저의 승리로 게임 종료 게임 종료 시, 스코어폼으로 화면 전환 [선택 결과 전달] 어떠한 버튼을 선택했는지에 대한 정보는 DialogResult를 통해 게임플레이 폼으로 전달 어떤 버튼을 선택했는지에 따라 다른 이미지가 띄워짐 5. SCORE 2개의 패널로 구성 (컴퓨터용 / 유저용) [게임 결과] 색으로 승패 표시 캐릭터 표정 &amp; 도장 이미지 승자의 패널에는 점수와 획득 금액 출력 (무승부 시, 우측과 같은 화면 띄워짐) [특이 사항] - 보너스 패, 흔들기 등을 생략해 프로젝트 스케일 조정 - 게임에 사용된 이미지 직접 제작 - 버전별 업데이트 내역 관리하여 효율적인 작업 수행","categories":[{"name":"Project","slug":"Project","permalink":"https://NAEJINHJ.github.com/categories/Project/"},{"name":"C#","slug":"Project/C","permalink":"https://NAEJINHJ.github.com/categories/Project/C/"}],"tags":[{"name":"Project","slug":"Project","permalink":"https://NAEJINHJ.github.com/tags/Project/"},{"name":"game","slug":"game","permalink":"https://NAEJINHJ.github.com/tags/game/"},{"name":"C#","slug":"C","permalink":"https://NAEJINHJ.github.com/tags/C/"}]},{"title":"Titanic: Machine Learning from Disaster - first challenge","slug":"Titanic","date":"2019-01-13T13:20:04.365Z","updated":"2019-01-13T15:02:36.450Z","comments":true,"path":"2019/01/13/Titanic/","link":"","permalink":"https://NAEJINHJ.github.com/2019/01/13/Titanic/","excerpt":"","text":"[Element] Survival NO = 0 Yes = 1 Pclass Ticket class 1st = 1 2nd = 2 3rd = 3 SibSp 동반한 형제, 자매, 배우자의 수 Parch 동반한 부모, 자식의 수 ticket 티켓 고유 넘버 Fare Passenger fare Cabin 객실 번호 Embarked 출발지 Cherbourg = C Queenstown = Q Southampton = S [향후 개선 방안] 이름의 last name 추출해 가족을 그룹으로 식별해볼 것 Age 결측치 다른 값으로 채워보기 Partner, sex, age를 고려 → 30대 이상일 경우, 부모일 확률 높음 참고해 볼 곳 &gt;&gt; https://www.kaggle.com/yassineghouzam/titanic-top-4-with-ensemble-modeling https://towardsdatascience.com/kaggle-titanic-machine-learning-model-top-7-fa4523b7c40 https://towardsdatascience.com/how-i-got-98-prediction-accuracy-with-kaggles-titanic-competition-ad24afed01fc","categories":[{"name":"Kaggle","slug":"Kaggle","permalink":"https://NAEJINHJ.github.com/categories/Kaggle/"}],"tags":[{"name":"modeling","slug":"modeling","permalink":"https://NAEJINHJ.github.com/tags/modeling/"},{"name":"BIGDATA","slug":"BIGDATA","permalink":"https://NAEJINHJ.github.com/tags/BIGDATA/"},{"name":"Kaggle","slug":"Kaggle","permalink":"https://NAEJINHJ.github.com/tags/Kaggle/"},{"name":"python","slug":"python","permalink":"https://NAEJINHJ.github.com/tags/python/"}]},{"title":"수소 충전소 최적의 설립 위치 추천\n- ➂ 분석 결과","slug":"dongguk-final","date":"2019-01-13T08:50:07.339Z","updated":"2019-01-13T09:07:17.871Z","comments":true,"path":"2019/01/13/dongguk-final/","link":"","permalink":"https://NAEJINHJ.github.com/2019/01/13/dongguk-final/","excerpt":"","text":"[목차] 분석요인 별 추천 입지 수소 충전소 최종 입지 추천 활용방안 및 한계점 참고 문헌 [분석요인 별 추천 입지] [수소 충전소 최종 입지 추천] [상위 5 곳] [상위 20 곳] [활용방안 및 한계점] [참고 문헌]","categories":[{"name":"Project","slug":"Project","permalink":"https://NAEJINHJ.github.com/categories/Project/"},{"name":"BIGDATA","slug":"Project/BIGDATA","permalink":"https://NAEJINHJ.github.com/categories/Project/BIGDATA/"}],"tags":[{"name":"modeling","slug":"modeling","permalink":"https://NAEJINHJ.github.com/tags/modeling/"},{"name":"BIGDATA","slug":"BIGDATA","permalink":"https://NAEJINHJ.github.com/tags/BIGDATA/"},{"name":"python","slug":"python","permalink":"https://NAEJINHJ.github.com/tags/python/"},{"name":"R","slug":"R","permalink":"https://NAEJINHJ.github.com/tags/R/"},{"name":"Project","slug":"Project","permalink":"https://NAEJINHJ.github.com/tags/Project/"}]},{"title":"수소 충전소 최적의 설립 위치 추천\n- ② 데이터 분석","slug":"dongguk2","date":"2019-01-10T12:07:57.693Z","updated":"2019-01-13T08:42:51.238Z","comments":true,"path":"2019/01/10/dongguk2/","link":"","permalink":"https://NAEJINHJ.github.com/2019/01/10/dongguk2/","excerpt":"","text":"[목차] 데이터 목록 및 전처리 분석 방법 - AHP 개요 - 의사결정 계층화 - 요소 선정 - 평가 기준 비교 - 가중치 추정 - 일관성 검증 [데이터 목록 및 전처리] 1. 사용 데이터 목록2. 전처리 과정 csv 형태의 원본 데이터를 python pandas를 이용, dataframe 형태로 가져옴 장소명과 도로명 주소 데이터 추출 지오코딩 API 이용 &gt;&gt; 해당 장소의 좌표값(위도, 경도) 얻음 하버사인 공식 사용 &gt;&gt; 좌표값을 기반으로, 곡면에서 두 지점간의 거리 계산 [분석 방법 - AHP] 1. AHP란? 고려한 데이터가 대부분 거리 데이터였고, 타 논문 참고 결과, 입지 선정시 AHP 기법을 가장 많이 활용한 것을 확인 2. 의사결정 계층- 분석 기준 설정 [상위 단계] 최종 목표(overall goal) [Level.1 단계] 평가 기준 1) 안정성 2) 설립 비용 3) 운영 효율성 [Level.2 단계] 평가 기준에 대한 선택 대안 1) 제 1 보호지역과의 거리 2) 서울 자치구별 화재 발생 3) 2km 반경 내 타 LPG 충전소 존재 유무 4) 버스 차고지와의 거리 3. 요소 선정 [안정성] 1) 제 1종 보호시설과의 거리 주유소의 폭발 위험성을 고려하여, 제 1 보호시설 간의 거리를 분석 요소로 선정 (초중고,유치원 데이터 이용) 제 1종 보호시설과 LPG 주유소간의 거리가 멀수록, 가중치 값 더 크게 산정 2) 자치구별 화재 발생률 수소의 경우, 타가스에 폭발했을 시 [위험 피해율]이 크고, 수소 위험성에 대한 인식이 수소 충전소 설립에 큰 영향을 미칠 수 있기에 분석 요소로 선정하였음 [설립 비용] 2km 반경 타 LPG 충전소 존재 유무 LPG 주유소가 밀집되어 있다면, 밀집된 LPG 주유소 중 한 곳을 수소 충전소로 대체하는 방안 고려 [운영 효율성] 버스 차고지와의 거리 2027년까지, 수도권의 경유 버스 → 수소/전기 버스 등으로 전면 교체 향후 버스 차고지 근처에 수소 충전소가 설립될 경우, 충전소 운영에 영향을 미칠 것이라 판단 매일 경제 (http://news.mk.co.kr/,2018.05.14) 월간 수소 경제 (http://www.h2news.kr/2018.07.10) 4. 평가 기준 비교 앞서 선정한 4가지 요인들에 대해, 중앙값을 기준으로 4개의 그룹으로 나눠, 그룹 번호 부여 모든 것들이 다 [커지면 좋거나/ 작아지면 좋거나]의 기준 이었기 때문에, 중앙값을 기준으로 grouping하기로 판단함 (타 논문을 참고하여, 쌍대비교치 3,5,7로 설정) 대안별 중요 순위는 주관적으로 설정됨 검증을 위해 이후 일관성 검증을 진행하였음 [쌍대비교표 설명] 차고지 기준으로 화재는 매우 중요 &gt;&gt; 7 부여 1종 보호시설은 화재보다는 덜 중요 즉, 적당히 중요 &gt;&gt; 5 부여 차고지 기준 2km 이내의 타 충전소의 개수는 약간 중요 &gt;&gt; 3 부여 [쌍대비교 결과]- 버스차고지 구별 화재 발생률, 제 1종 보호시설, 주변 LPG 주유소 요인에 대해서도 동일하게 쌍대비교 수행 5. 가중치 추정 고유치 방법(Eigenvalue Method) 쌍별 비교된 의사 결정 요소들 간의 쌍대적 가중치 계산 k = 평가 기준 (버스 차고지, LPG 주유소 밀집도, 제 1종 보호시설, 자치구별 화재 비율) 상단의 수식을 통해 최종 행렬(nX1)을 만들어 냄 6. 일관성 검증 상단의 수식을 통해 일관성 검증 수행","categories":[{"name":"Project","slug":"Project","permalink":"https://NAEJINHJ.github.com/categories/Project/"},{"name":"BIGDATA","slug":"Project/BIGDATA","permalink":"https://NAEJINHJ.github.com/categories/Project/BIGDATA/"}],"tags":[{"name":"modeling","slug":"modeling","permalink":"https://NAEJINHJ.github.com/tags/modeling/"},{"name":"BIGDATA","slug":"BIGDATA","permalink":"https://NAEJINHJ.github.com/tags/BIGDATA/"},{"name":"python","slug":"python","permalink":"https://NAEJINHJ.github.com/tags/python/"},{"name":"R","slug":"R","permalink":"https://NAEJINHJ.github.com/tags/R/"},{"name":"Project","slug":"Project","permalink":"https://NAEJINHJ.github.com/tags/Project/"}]},{"title":"수소 충전소 최적의 설립 위치 추천\n- ① 분석 배경 및 목표","slug":"dongguk","date":"2019-01-10T02:29:50.835Z","updated":"2019-01-12T07:23:51.605Z","comments":true,"path":"2019/01/10/dongguk/","link":"","permalink":"https://NAEJINHJ.github.com/2019/01/10/dongguk/","excerpt":"","text":"[목차] 분석 배경 분석 목표 [개요] ▶ 빅데이터 청년인재 [빅데이터 분석 기반 지능 SW 과정] 프로젝트 ▷ 기간 2018/07/01 ~ 2018/09/07 (약 2개월) ▶ 담당 역할 데이터 수집 데이터 전처리 모델링 ▷ 활용 분석 도구 Jupyter notebook (python) Folium (python) Rstudio (R) Excel 1. 분석 배경 ▶ 목표치에 따른 수소 충전소 확충 진행률의 부진 확인가능 “부지 확보 장기간 소요” &gt;&gt; 주요한 수소 충전소 보급 지연 원인 ▶ 일반 전기차 충전소의 약 20배의 비용 소요 ▷ 기존 충전소 / 주유소 부지 활용해 최적의 배치 전략 필요 [출처] news1뉴스(http://news1.kr,2018.03.22) 수소 산업 협회는 서울에 한정 짓더라도 기존의 LPG 충전소를 활용하면, 약 70여곳의 수소 충전소 확보가 가능하다 밝힘 기존의 부지, 건물, 인력을 그대로 활용하는 것이 비용적인 측면에서 효율적인 것을 확인 가능 [기타 참조 가능 기사] - LPG-수소 융‧복합 충전소, 부지 면적 확보가 ‘핵심’ (http://www.gnetimes.co.kr/news/articleView.html?idxno=44757) - 1145개 LPG충전ㆍ주유소 “수소 복합 충전소 전환 가능” (http://www.energy-news.co.kr/news/articleView.html?idxno=54052) 2. 분석 목표","categories":[{"name":"Project","slug":"Project","permalink":"https://NAEJINHJ.github.com/categories/Project/"},{"name":"BIGDATA","slug":"Project/BIGDATA","permalink":"https://NAEJINHJ.github.com/categories/Project/BIGDATA/"}],"tags":[{"name":"modeling","slug":"modeling","permalink":"https://NAEJINHJ.github.com/tags/modeling/"},{"name":"BIGDATA","slug":"BIGDATA","permalink":"https://NAEJINHJ.github.com/tags/BIGDATA/"},{"name":"python","slug":"python","permalink":"https://NAEJINHJ.github.com/tags/python/"},{"name":"R","slug":"R","permalink":"https://NAEJINHJ.github.com/tags/R/"},{"name":"Project","slug":"Project","permalink":"https://NAEJINHJ.github.com/tags/Project/"}]},{"title":"LA Dodgers 홍보 효과 분석","slug":"bobblehead","date":"2018-12-20T14:22:06.015Z","updated":"2019-01-27T17:28:04.285Z","comments":true,"path":"2018/12/20/bobblehead/","link":"","permalink":"https://NAEJINHJ.github.com/2018/12/20/bobblehead/","excerpt":"","text":"● 목적 1) 버블헤드 인형 홍보전략을 통한 야구장 관중 증가 여부 2) 야구표로 증가한 구단 수익으로 버블헤드 인형 홍보활동에 투자한 고정비용, 가변비용 충당 가능 여부 ● 라이브러리 1) 선형 회귀 분석용 함수: car 2) 그래픽 패키지: lattice &lt;메이저리그 2012년 다저스 홈경기 데이터&gt; ordered_day_of_week 정렬된 요일 변수 ordered_month 정렬된 월 변수 [요일별 dodgers 관중수 분포] 123with(data=dodgers,plot(ordered_day_of_week,attend/1000,xlab=\"Day of Week\",ylab = \"Attendence (thousands)\",col=\"violet\",las=1)) [월별 dodgers 관중수 분포] 123with(data=dodgers,plot(ordered_month,attend/1000,xlab=\"Month\",ylab=\"Attendance (thousands)\",col=\"light blue\",las=1)) [주간/야간 경기 &amp; 불꽃놀이 유무에 따른 관중수 분포] 경기 시간과 날씨 (맑음/흐림)에 대한 조건을 설정 → 온도와 관중수 간의 관계 파악 * library(lattice) (참조: http://visualize.tistory.com/305): 직교 형태의 그래픽(Trellis graphic)을 생성하는 코드 포함1) 다차원의 데이터를 사용하려 할 때, 한번에 많은 플롯 생성 가능2) 기본 플로팅 시스템의 방법을 ‘mfrow’와 ‘mfcall’이라는 인수 통해 활용 가능 1234567891011121314151617181920212223library(lattice) # 플로팅을 위해 사용하는 라이브러리group.labels &lt;- c(\"No Fireworks\",\"Fireworks\")group.symbols &lt;- c(21,24)group.colors &lt;- c(\"black\",\"black\")group.fill &lt;- c(\"black\",\"red\")xyplot(attend/1000~temp | skies + day_night, data=dodgers, groups=fireworks, pch=group.symbols, aspect= 1, cex=1. 악 * library(&lt;font color=5, col=group.colors, fill=group.fill, layout=c(2,2), type=c(\"p\",\"g\"), strip=strip.custom(strip.levels=TRUE,strip.names=FALSE, style=1), xlab = \"Temperature (Degrees Fahrenheit)\", ylab = \"Attendance (thousands)\", key = list(space=\"top\", text = list(rev(group.labels), col=rev(group.colors)), points= list(pch=rev(group.symbols),col=rev(group.colors), fill = rev(group.fill)) ) #list ) # xyplot &gt; 그래프 분석 결과, 맑은 날씨의 주간경기에는 온도가 높을수록 관중수가 적다.&gt; 일반적으로 일요일에는 주간경기를 한다.&gt; 2012년 LA 다저스 구장의 경기는 한 게임을 제외하고 모두 날씨가 좋았다. [LA 다저스의 상대팀 기준 다저스 구장 관중수] 단변량 산점도12345678910111213141516group.labels &lt;- c(\"Day\",\"Night\")group.symbols &lt;- c(1,20)group.symbols.size &lt;- c(2,2.75)bwplot(opponent~attend/1000,data=dodgers, groups=day_night, xlab = \"Attendance (thousands)\", panel = function(x,y,groups,subscripts, ...)&#123; panel.grid(h= (length(levels(dodgers$opponent))-1),v=-1) panel.stripplot(x,y,groups=groups, subscripts = subscripts, cex=group.symbols.size, pch=group.symbols, col=\"darkblue\" ) &#125;, key= list(space=\"top\", text=list(group.labels,col=\"black\"), points = list(pch=group.symbols, cex=group.symbols.size, col=\"darkblue\") ) )&gt; 도시 규모가 큰 메트로폴리탄 지역을 연고로 하는 팀과 경기를 하는 경우 관중수는 큰 변화 X [회귀모형] train-test 모형- 버블 헤드 인형을 이용한 홍보활동에 대한 통계적 유의성 검증- 유형I 분산 분석으로 순차적 검증에 대한 제곱합을 계산1print(anova(my.model.fit))진단용 plot [패키지 car 이용해 추가 모형 진단] 123library(car)residualPlots(my.model.fit)marginalModelPlots(my.model.fit) 유의한 outlier 확인1print(outlierTest(my.model.fit))&gt; 없는 것으로 확인&lt;다저스의 버블헤드 인형 홍보에 대한 예측모형에 근거&gt;1) 다가오는 시즌에 예측 대상 경기의 관중수 예측 가능2) 버블헤드 인형을 활용한 홍보에 따른 관중수 예측 가능3) 관중 예측값 사용해 홍보 유무에 따른 다저스 수익 예측 가능","categories":[{"name":"BIGDATA","slug":"BIGDATA","permalink":"https://NAEJINHJ.github.com/categories/BIGDATA/"},{"name":"Modeling","slug":"BIGDATA/Modeling","permalink":"https://NAEJINHJ.github.com/categories/BIGDATA/Modeling/"},{"name":"R","slug":"BIGDATA/Modeling/R","permalink":"https://NAEJINHJ.github.com/categories/BIGDATA/Modeling/R/"}],"tags":[{"name":"modeling","slug":"modeling","permalink":"https://NAEJINHJ.github.com/tags/modeling/"},{"name":"R","slug":"R","permalink":"https://NAEJINHJ.github.com/tags/R/"}]},{"title":"START","slug":"START","date":"2018-12-08T06:24:14.436Z","updated":"2018-12-08T06:26:35.811Z","comments":true,"path":"2018/12/08/START/","link":"","permalink":"https://NAEJINHJ.github.com/2018/12/08/START/","excerpt":"","text":"","categories":[{"name":"LOG","slug":"LOG","permalink":"https://NAEJINHJ.github.com/categories/LOG/"}],"tags":[{"name":"log","slug":"log","permalink":"https://NAEJINHJ.github.com/tags/log/"},{"name":"test","slug":"test","permalink":"https://NAEJINHJ.github.com/tags/test/"}]}]}